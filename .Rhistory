hi all
clear
?summary
?summary()
## get the max and min for each row
hypercube[, "max"] <- apply(hypercube, MARGIN = 1, max)
set.seed(11)
## create a data frame of 3 columns and 10,000 rows filled with
## random uniform data
cube <- data.frame(matrix(runif(3*10000, min = 0, 1), ncol=3))
## get the max and min for each row
cube[, "max"] <- apply(cube, MARGIN = 1, max)
cube[, "min"] <- apply(cube, MARGIN = 1, min)
## add a column to mark if the row is considered in the boundary
## initially this column will be filled with 0 (not boundary)
cube$boundary <-0
## set boundary to 1 if min is less than .05
cube$boundary[cube$min < .05] <-1
##  or max greater than .95
cube$boundary[cube$max > .95] <-1
sum(cube$boundary)
## Expected answer
10000 * (1-.9^3)
##--------------------------------------------------------
set.seed(11)
## create a data frame of 50 columns and 10,000 rows filled with
## random uniform data
hypercube <- data.frame(matrix(runif(50*10000, min = 0, 1), ncol=50))
## get the max and min for each row
hypercube[, "max"] <- apply(hypercube, MARGIN = 1, max)
hypercube[, "min"] <- apply(hypercube, MARGIN = 1, min)
## add a column to mark if the row is considered in the boundary
## initially this column will be filled with 0 (not boundary)
hypercube$boundary <-0
## set boundary to 1 if min is less than .05
hypercube$boundary[hypercube$min < .05] <-1
##  or max greater than .95
hypercube$boundary[hypercube$max > .95] <-1
sum(hypercube$boundary)
## Expected answer
10000 * (1-.9^50)
# Choose points, randomly distributed
n <- 3000  # number of points
p <- 2  # number of dimensions
x <- matrix(runif(n*p), ncol=p)
Fringe <- function(z){
# Determine if z lies within 0.05 distance from the boundary
# z is a vector of length p
any(abs(z - 0.5) > 0.45)
}
result <- apply(x, 1, Fringe)
png('edges.png')
plot(x[,1:2])
points(x[,1][result], x[,2][result], col='red')
dev.off()
ratio <- sum(result) / n
# plot p versus ratio
p <- 1:50
GetRatio <- function(dim){
1 - (0.9)^dim
}
ratio <- sapply(p, GetRatio)
png('curse_dimensionality.png')
plot(p, ratio)
dev.off()
plot(hypercube)
y= if(x>3) 10 else 0
x=2
y= if(x>3) 10 else 0
x=20
y= if(x>3) 10 else 0
for (i in 1:10) print(i)
z = c("a","b","c","d")
for (i in z) print(i)
?seq_along
?seq_len
wd = "C:/Users/Nip/Documents/GitHub/ExData_Plotting1"
setwd(wd)
fileName = "tmp.csv"
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",destfile = fileName)
allData = read.csv2(fileName, header = TRUE, stringAsFactor = FALSE)
?read.csv2
allData = read.csv2(fileName, header = TRUE, stringsAsFactors = FALSE)
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",destfile = fileName)
unzip(fli)
fileName = "tmp.zip"
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",destfile = fileName)
unzip(fileName)
allData = read.csv2(csvFile, header = TRUE, stringsAsFactors = FALSE)
csvFile = "household_power_consumption.txt"
allData = read.csv2(csvFile, header = TRUE, stringsAsFactors = FALSE)
data = subset(allData, allData$Date == "1/2/2007" | allData$Date == "1/2/2007")
View(data)
?as.Date
?paste
View(data)
data$DateTime = as.POSIXlt(paste(data$Date, data$Time), format = "%d/%m/%Y %H:%M:%S")
View(data)
View(data)
source(readData.R)
source("readData.R")
hist(data$Global_active_power, col = "red")
?par
hist(data$Global_active_power, col = "red", title = "Global Active Power")
title("Global Active Power")
hist(data$Global_active_power, col = "red", title = )
hist(data$Global_active_power, col = "red")
title("Global Active Power")
?par
?title
hist(data$Global_active_power, col = "red", main = "Global Active Power")
hist(data$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power(kilowatts)")
?dev.copy
dev.copy(png, "plot1.png")
dev.off()
plot(data$DateTime, data$Global_active_power)
with(data, plot(DateTime, Global_active_power, type="n"))
with(data, lines(DateTime, Global_active_power))
source("readData.R")
hist(data$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power(kilowatts)")
dev.copy(png, "plot1.png")
dev.off()
with(data, plot(DateTime, Global_active_power, type="n"))
with(data, lines(DateTime, Global_active_power))
with(data, plot(DateTime, Global_active_power, type="n",ylab = "Global Active Power(kilowatts)"))
with(data, lines(DateTime, Global_active_power))
dev.copy(png, "plot2.png")
dev.off()
with(data, plot(DateTime, Global_active_power, type="n", ylab = "Global Active Power(kilowatts)"))
with(data, lines(DateTime, Global_active_power, xlab = ""))
with(data, lines(DateTime, Global_active_power, xlab = ""))
with(data, plot(DateTime, Global_active_power, type="n", ylab = "Global Active Power(kilowatts)"))
with(data, plot(DateTime, Global_active_power, type="n", xlab = "", ylab = "Global Active Power(kilowatts)"))
with(data, lines(DateTime, Global_active_power))
#save to the file
dev.copy(png, "plot2.png")
dev.off()
with(data, plot(DateTime, Sub_metering_1, type="n", xlab = "", ylab = "Energy sub metering"))
with(data, lines(DateTime, Sub_metering_1))
with(data, lines(DateTime, Sub_metering_2, col = "blue"))
with(data, lines(DateTime, Sub_metering_2, col = "red"))
with(data, lines(DateTime, Sub_metering_2, col = "red"))
with(data, lines(DateTime, Sub_metering_2, col = "blue"))
with(data, lines(DateTime, Sub_metering_3, col = "blue"))
?legend
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty = 1)
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty = 1, col = c("black","red","blue"))
with(data, lines(DateTime, Sub_metering_1))
with(data, lines(DateTime, Sub_metering_2, col = "red"))
with(data, lines(DateTime, Sub_metering_3, col = "blue"))
dev.copy(png, "plot3.png")
dev.off()
?mfcol
data$Voltage = as.numeric(data$Voltage)
data$Global_reactive_power= as.numeric(data$Global_reactive_power)
plot2 = function(){
with(data, plot(DateTime, Global_active_power, type="n", xlab = "", ylab = "Global Active Power(kilowatts)"))
with(data, lines(DateTime, Global_active_power))
}
plot2()
source("plots.R")
source("plots.R")
plot3()
source("plots.R")
plot3()
par(mfrow=c(2,2))
plot2()
plot3()
par(mfcol=c(2,2))
plot2()
plot3()
with(data, plot(DateTime, Voltage, type="n", xlab = "datetime", ylab = "Voltage"))
with(data, lines(DateTime, Voltage))
#subplot 4
with(data, plot(DateTime, Global_reactive_power, type="n", xlab = "datetime"))
with(data, lines(DateTime, Global_reactive_power))
#save to the file
dev.copy(png, "plot3.png")
dev.off()
#save to the file
dev.copy(png, "plot4.png")
dev.off()
?legend
source('~/GitHub/ExData_Plotting1/plot4.R')
source("plots.R")
?par
par(mfcol=c(2,2), ps = 10)
#subplot 1
plot2()
#subplot 2
plot3()
#subplot 3
with(data, plot(DateTime, Voltage, type="n", xlab = "datetime", ylab = "Voltage"))
with(data, lines(DateTime, Voltage))
#subplot 4
with(data, plot(DateTime, Global_reactive_power, type="n", xlab = "datetime"))
with(data, lines(DateTime, Global_reactive_power))
#save to the file
dev.copy(png, "plot4.png")
dev.off()
par(mfcol=c(2,2), ps = 12)
#subplot 1
plot2()
#subplot 2
plot3()
#subplot 3
with(data, plot(DateTime, Voltage, type="n", xlab = "datetime", ylab = "Voltage"))
with(data, lines(DateTime, Voltage))
#subplot 4
with(data, plot(DateTime, Global_reactive_power, type="n", xlab = "datetime"))
with(data, lines(DateTime, Global_reactive_power))
#save to the file
dev.copy(png, "plot4.png")
dev.off()
par(mfcol=c(2,2), ps = 12)
#subplot 1
plot2()
#subplot 2
plot3()
#subplot 3
with(data, plot(DateTime, Voltage, type="n", xlab = "datetime", ylab = "Voltage"))
with(data, lines(DateTime, Voltage))
#subplot 4
with(data, plot(DateTime, Global_reactive_power, type="n", xlab = "datetime"))
with(data, lines(DateTime, Global_reactive_power))
#save to the file
dev.copy(png, "plot4.png")
dev.off()
data[data== "?"] = NA
data = subset(allData, allData$Date == "1/2/2007" | allData$Date == "2/2/2007")
data[data == "?"] = NA
View(data)
sum(is.na(data))
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
par(mfcol=1)
par(mfcol=c(1)
)
par(mfcol=c(1,1))
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot2.R')
dev.copy(png, "plot1.png")
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot2.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
?par
hist(data$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power(kilowatts)")
hist(data$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power(kilowatts)")
source('~/GitHub/ExData_Plotting1/plot2.R')
